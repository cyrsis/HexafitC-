Imports System.IO.Ports

Public Class MainForm

    'CSV Export Settings
    Dim csvFile As String
    Dim outFile As IO.StreamWriter

    Dim myPort As Array  'COM Ports detected on the system will be stored here
    Private mySerialPort As New SerialPort
    Private comBuffer As Byte()
    Private Delegate Sub UpdateFormDelegate()
    Private UpdateFormDelegate1 As UpdateFormDelegate

    Public CSVDirectory As String = "C:\"
    Public FileSession As Boolean = False

    Dim RecTelegram(40), SendTelegram(40) As Integer
    Dim R1, O1, R2, O2, R3, O3 As Integer

    Dim Frequency As Integer

    Dim MilliSecond As Integer
    Dim MSecond As String
    Dim TimeStamp As String
    Dim VL(50) As Byte

    Public X_Acc, Y_Acc, Z_Acc, Temperature, BatteryVoltage, X_Gyro, Y_Gyro, Z_Gyro, X_HG, Y_HG, Z_HG, ARoll, APitch, AYaw, LS_X, LS_Y, LS_Z As Integer
    Public SX_Acc, SY_Acc, SZ_Acc, SSX_Acc, SSY_Acc, SSZ_Acc, SX_Gyro, SY_Gyro, SZ_Gyro, SX_HG, SY_HG, SZ_HG, SSX_HG, SSY_HG, SSZ_HG, SRoll, SPitch, SYaw, SLS_X, SLS_Y, SLS_Z As Integer
    Public Acceleration, Speed, Impact, WindowWidth As Integer

    Dim ImpactVect(6000), SpeedVect(6000), AcclVect(6000) As Integer

    Dim ACC(3, 500) As Integer
    Dim HACC(3, 500) As Integer
    Dim GYRO(3, 500) As Integer

    Dim H_Impact_Density, M_Impact_Density, L_Impact_Density As Integer

    Private StopWatch As New Stopwatch

    Dim StatusByte As Integer


    Private Sub Form1_Load(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles MyBase.Load

        CheckForIllegalCrossThreadCalls = False


        'Variables Initialization
        Frequency = 1
        WindowWidth = 60
        Sample.Text = WindowWidth
        SampleSlidebar.Value = WindowWidth

        'Bluetooth Communication Settings
        BluetoothSettings()

        'Others Init Values
        CheckedListBox1.SetSelected(0, 1)
        CheckedListBox1.SetItemCheckState(0, 1)
        ResetCurves()

    End Sub

    Private Sub SerialPort_DataReceived(ByVal sender As System.Object, ByVal e As System.IO.Ports.SerialDataReceivedEventArgs) Handles SerialPort.DataReceived
    End Sub

    Private Sub Timer_Tick(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Timer.Tick
        Dim Period As Integer
        Period = FreqBar.Value

        Timer.Interval = Period

        If mySerialPort.IsOpen = True Then
            CycleRoutine()
            'ActivityLog.Items.Add("Sent...")
        End If
    End Sub

    Private Sub ToolStripButton1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        Dim PNumberString As String
        PNumberString = "COM" + Str(PortNumber.Text)
        PNumberString = PNumberString.Replace(" ", "")
        SerialPort.PortName = PNumberString

        If mySerialPort.IsOpen = False Then
            mySerialPort.Open()
        End If

        If SerialPort.IsOpen = True Then
            MilliSecond = Date.Now.Millisecond
            If MilliSecond < 10 Then MSecond = "00" + Str(MilliSecond) + " ms"
            If MilliSecond < 100 And MilliSecond >= 10 Then MSecond = "0" + Str(MilliSecond) + " ms"
            If MilliSecond >= 100 Then MSecond = Str(MilliSecond) + " ms"
            MSecond = MSecond.Replace(" ", "")
            TimeStamp = Date.Now + "   " + MSecond
            ActivityLog.Items.Add(TimeStamp + "     | Bluetooth VR Serial Port # COM" + PortNumber.Text + " is successfully opened.")

        End If
    End Sub

    Private Sub ToolStripButton2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
        If mySerialPort.IsOpen = True Then
            mySerialPort.Close()
        End If

        If SerialPort.IsOpen = False Then
            MilliSecond = Date.Now.Millisecond
            If MilliSecond < 10 Then MSecond = "00" + Str(MilliSecond) + " ms"
            If MilliSecond < 100 And MilliSecond >= 10 Then MSecond = "0" + Str(MilliSecond) + " ms"
            If MilliSecond >= 100 Then MSecond = Str(MilliSecond) + " ms"
            MSecond = MSecond.Replace(" ", "")
            TimeStamp = Date.Now + "   " + MSecond
            ActivityLog.Items.Add(TimeStamp + "     | Bluetooth VR Serial Port # COM" + SerialPort.PortName + " is successfully released.")

        End If
    End Sub

    Private Sub CloseHEXAFITToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles CloseHEXAFITToolStripMenuItem.Click

        If mySerialPort.IsOpen = True Then
            mySerialPort.Close()
        End If

        Me.Close()

    End Sub

    Private Sub LoadChartsToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles LoadChartsToolStripMenuItem.Click
        ResetCurves()
    End Sub

    Public Sub CycleRoutine()

        'Acquire data from HEXAFIT
        'BluetoothTransmitt() ' Used only in master slave communication
        BluetoothReceive()

        'Scale Raw Data Values
        AccelerationScaling()
        ImpactScaling()
        GyroScaling()
        LinearSpeedScaling()
        AnglesScaling()

        'Display & Calculation Functions
        If ImpactUpdate.Checked = True Then
            AverageShockCalculation()
        End If

        If AccelUpdate.Checked = True Then
            AverageAccelCalculation()
        End If

        If SpeedUpdate.Checked = True Then
            AverageSpeedCalculation()
        End If

        If RawUpdate.Checked = True Then
            RawDataBargraphDisplay()
        End If

        'Update Battery and Temperature Values
        Battery_Temperature_LevelUpdate()

        Ratio_Polar_Display()

        'Write to the CSV File Session
        Write_CSV()

    End Sub
    Public Sub Write_CSV()
        Dim Stream As String

        Stream = GameTime.Text + "," + Str(SSX_Acc) + "," + Str(SSY_Acc) + "," + Str(SSZ_Acc) + "," + Str(SX_Gyro) + "," + Str(SY_Gyro) + "," + Str(SZ_Gyro) + "," + Str(SSX_HG) + "," + Str(SSY_HG) + "," + Str(SSZ_HG) + "," + Str(SLS_X) + "," + Str(SLS_Y) + "," + Str(SLS_Z) + "," + Str(Temperature)
        If FileSession = True Then
            outFile.WriteLine(Stream)
        End If

    End Sub
    Public Sub BluetoothReceive()
        Dim ReadBuffer(500) As Byte
        Dim Header(20), Footer(20) As String
        Dim RBytesCount As Integer
        Dim i As Integer


        'Here, a 10 ms pause may be included only in the slow VB interface
        'No need in a fast C application
        'System.Threading.Thread.Sleep(10)


        'Check the count of the bytes received on the serial port
        RBytesCount = mySerialPort.BytesToRead

        'Read the received data and dump them in the reception buffer as bytes

        For i = 0 To RBytesCount - 1
            ReadBuffer(i) = mySerialPort.ReadByte

        Next

        Header(0) = Chr(ReadBuffer(0))
        Header(1) = Chr(ReadBuffer(1))
        Footer(0) = Chr(ReadBuffer(38))
        Footer(1) = Chr(ReadBuffer(39))



        If (RBytesCount = 40) And (Header(0) = "*") And (Header(1) = "#") And (Footer(0) = "+") And (Footer(1) = "%") Then

            'Allocate the reception buffer into the program variable

            X_Acc = BitConverter.ToInt16(ReadBuffer, 5)
            Y_Acc = BitConverter.ToInt16(ReadBuffer, 7)
            Z_Acc = BitConverter.ToInt16(ReadBuffer, 9)

            Temperature = BitConverter.ToInt16(ReadBuffer, 11)

            X_Gyro = BitConverter.ToInt16(ReadBuffer, 13)
            Y_Gyro = BitConverter.ToInt16(ReadBuffer, 15)
            Z_Gyro = BitConverter.ToInt16(ReadBuffer, 17)

            X_HG = BitConverter.ToInt16(ReadBuffer, 19)
            Y_HG = BitConverter.ToInt16(ReadBuffer, 21)
            Z_HG = BitConverter.ToInt16(ReadBuffer, 23)

            ARoll = BitConverter.ToInt16(ReadBuffer, 25)
            APitch = BitConverter.ToInt16(ReadBuffer, 27)
            AYaw = BitConverter.ToInt16(ReadBuffer, 29)

            LS_X = BitConverter.ToInt16(ReadBuffer, 31)
            LS_Y = BitConverter.ToInt16(ReadBuffer, 33)
            LS_Z = BitConverter.ToInt16(ReadBuffer, 35)

            BatteryVoltage = ReadBuffer(4)

        End If
    End Sub

    Public Sub BluetoothTransmitt()
        Dim CRC As Byte

        CRC = 12 ' Sample, can be used in future telegram enhacements

        If mySerialPort.IsOpen = True Then

            mySerialPort.Write("*#XAB+%")

        End If
    End Sub

    Public Sub BluetoothSettings()
        Dim i As Integer

        'Serial Port Settings
        SerialPort.Encoding = System.Text.Encoding.GetEncoding(28591)

        With mySerialPort
            .PortName = "COM4"
            .BaudRate = 9600
            .DataBits = 8
            .Parity = Parity.None
            .StopBits = StopBits.One
            .Handshake = Handshake.None
        End With

        myPort = IO.Ports.SerialPort.GetPortNames()

        For i = 0 To UBound(myPort)
            PortNumber.Items.Add(myPort(i))
        Next
        PortNumber.Text = PortNumber.Items.Item(0)
    End Sub

    Public Sub AccelerationScaling()

        SX_Acc = Math.Abs(X_Acc)
        SY_Acc = Math.Abs(Y_Acc)
        SZ_Acc = Math.Abs(Z_Acc)

        SSX_Acc = X_Acc
        SSY_Acc = Y_Acc
        SSZ_Acc = Z_Acc
    End Sub

    Public Sub ImpactScaling()
        SX_HG = Math.Abs(X_HG) * 100000 / 16384
        SY_HG = Math.Abs(Y_HG) * 100000 / 16384
        SZ_HG = Math.Abs(Z_HG) * 100000 / 16384

        SSX_HG = X_HG * 100000 / 16384
        SSY_HG = Y_HG * 100000 / 16384
        SSZ_HG = Z_HG * 100000 / 16384

        SX.Text = SX_HG
        SY.Text = SY_HG
        SZ.Text = SZ_HG

    End Sub

    Public Sub GyroScaling()
        SX_Gyro = X_Gyro * 100 / 32768
        SY_Gyro = Y_Gyro * 100 / 32768
        SZ_Gyro = Z_Gyro * 100 / 32768

    End Sub

    Public Sub LinearSpeedScaling()
        SLS_X = LS_X / 1000
        SLS_Y = LS_Y / 1000
        SLS_Z = LS_Z / 1000
    End Sub

    Public Sub AnglesScaling()
        SRoll = ARoll
        SPitch = APitch
        SYaw = AYaw
    End Sub

    Public Sub AverageSpeedCalculation()
        Dim i As Integer
        Dim Speed_Average_Totaliser, Average_Speed_Value As ULong
        Dim IND As Integer

        ' Shift the sorage vector for one position and covering the complete game over 6,000 samples
        For i = 1 To (WindowWidth - 1)
            SpeedVect(i) = SpeedVect(i + 1)
        Next i


        'Update Speed X,Y,Z Values
        TVx.Text = SLS_X
        TVy.Text = SLS_Y
        TVz.Text = SLS_Z

        'Calculate the Average Vectorial Speed (X+Y+Z) and Update Instant Speed Value
        Speed = Math.Sqrt(SLS_X ^ 2 + SLS_Y ^ 2 + SLS_Z ^ 2)

        SpeedVect(WindowWidth) = Speed
        SpeedVect(WindowWidth - 1) = Speed
        InstantSpeed.Text = Speed

        ' Update the trend
        SpeedChart.Series("Series1").Points.Clear()
        For i = 1 To WindowWidth
            SpeedChart.Series("Series1").Points.AddXY(i, SpeedVect(i))
        Next i

        'Detect the Maximal Value
        For i = 1 To WindowWidth
            If SpeedVect(i) > SpeedVect(0) Then
                SpeedVect(0) = SpeedVect(i)
                MaxSpeed.Text = SpeedVect(0)
            End If
        Next i

        ' Average Speed Calculation
        IND = 0
        Speed_Average_Totaliser = 0
        For i = 1 To WindowWidth
            If SpeedVect(i) > 0 Then
                IND = IND + 1
                Speed_Average_Totaliser = Speed_Average_Totaliser + SpeedVect(i)
            End If

            If IND <> 0 Then Average_Speed_Value = Speed_Average_Totaliser / IND
            AverageSpeed.Text = Average_Speed_Value

        Next i

    End Sub

    Public Sub AverageAccelCalculation()
        Dim i As Integer
        Dim Accel_Average_Totaliser, Average_Accel_Value As ULong
        Dim IND As Integer

        ' Shift the sorage vector for one position and covering the complete game over 6,000 samples
        For i = 1 To (WindowWidth - 1)
            AcclVect(i) = AcclVect(i + 1)
        Next i

        'Update Speed X,Y,Z Values
        TAx.Text = SX_Acc
        TAy.Text = SY_Acc
        TAz.Text = SZ_Acc


        'Calculate the Average Vectorial Acceleration (X+Y+Z) and Update Instant Speed Value
        Acceleration = Math.Sqrt(SX_Acc ^ 2 + SY_Acc ^ 2 + SZ_Acc ^ 2)

        AcclVect(WindowWidth) = Acceleration
        AcclVect(WindowWidth - 1) = Acceleration
        InstantAcc.Text = Acceleration

        ' Update the trend
        AccelerationChart.Series("Series1").Points.Clear()
        For i = 1 To WindowWidth
            AccelerationChart.Series("Series1").Points.AddXY(i, AcclVect(i))
        Next i

        'Detect the Maximal Value
        For i = 1 To WindowWidth
            If AcclVect(i) > AcclVect(0) Then
                AcclVect(0) = AcclVect(i)
                MaxAcc.Text = AcclVect(0)
            End If
        Next i

        ' Average Speed Calculation
        IND = 0
        Accel_Average_Totaliser = 0
        For i = 1 To WindowWidth
            If AcclVect(i) > 0 Then
                IND = IND + 1
                Accel_Average_Totaliser = Accel_Average_Totaliser + AcclVect(i)
            End If

            If (IND <> 0) Then Average_Accel_Value = Accel_Average_Totaliser / IND
            AverageAcc.Text = Average_Accel_Value

        Next i

    End Sub

    Public Sub AverageShockCalculation()
        Dim HT, MT, LT, AverageImpactValue As Integer
        Dim i As Integer
        Dim Impact_Average_Totaliser As ULong
        Dim IND As Integer

        ' Shift the sorage vector for one position and covering the complete game over 60 samples
        For i = 1 To (WindowWidth - 1)
            ImpactVect(i) = ImpactVect(i + 1)
        Next i

        'Calculate the Average Impact (X+Y+Z) and Update Instant Impact Value
        Impact = Math.Sqrt(SX_HG ^ 2 + SY_HG ^ 2 + SZ_HG ^ 2)

        ImpactVect(WindowWidth) = Impact
        ImpactVect(WindowWidth - 1) = Impact
        ActualShock.Text = Impact

        ' Update the trend
        ShockSpectrum.Series("Series1").Points.Clear()
        For i = 1 To WindowWidth
            ShockSpectrum.Series("Series1").Points.AddXY(i, ImpactVect(i))
        Next i

        'Detect the Maximal Value
        For i = 1 To WindowWidth
            If ImpactVect(i) > ImpactVect(0) Then
                ImpactVect(0) = ImpactVect(i)
                MaxImpact.Text = ImpactVect(0)
            End If
        Next i

        'Impact Density Calculation
        L_Impact_Density = 0
        M_Impact_Density = 0
        H_Impact_Density = 0

        LT = 1000 * Val(LowThresholdG.Text.Substring(1, 3))
        MT = 1000 * Val(MediumThresholdG.Text.Substring(1, 3))
        HT = 1000 * Val(HighThresholdG.Text.Substring(1, 3))

        For i = 1 To WindowWidth
            If ((ImpactVect(i) > LT) And (ImpactVect(i) < MT)) Then L_Impact_Density = L_Impact_Density + 1
            If ((ImpactVect(i) > MT) And (ImpactVect(i) < HT)) Then M_Impact_Density = M_Impact_Density + 1
            If (ImpactVect(i) > HT) Then H_Impact_Density = H_Impact_Density + 1
        Next i

        ShocksChart.Series("Series1").Points.Clear()
        ShocksChart.Series("Series1").Points.AddXY("Low", L_Impact_Density)
        ShocksChart.Series("Series1").Points.AddXY("Medium", M_Impact_Density)
        ShocksChart.Series("Series1").Points.AddXY("High", H_Impact_Density)

        ' Average Impact Calculation
        IND = 0
        Impact_Average_Totaliser = 0
        For i = 1 To WindowWidth
            If ImpactVect(i) > LT Then
                IND = IND + 1
                Impact_Average_Totaliser = Impact_Average_Totaliser + ImpactVect(i)
            End If

            ShockDensity.Text = IND
            If IND <> 0 Then AverageImpactValue = Impact_Average_Totaliser / IND
            AverageImpact.Text = AverageImpactValue

        Next i



    End Sub
    Public Sub Ratio_Polar_Display()
        'Impact Direction Polar Plot
        If PolarUpdate.Checked = True Then
            DrawPolar(SSX_HG, SSY_HG, SSZ_HG)
            XYChart.Series("XAcc").Points.AddXY(O1, R1)
            XZChart.Series("XAcc").Points.AddXY(O2, R2)
            YZChart.Series("XAcc").Points.AddXY(O3, R3)
        End If

        'Ratio Charts Update
        If RatioUpdate.Checked = True Then
            SpeedAccChartX.Series("Series1").Points.AddXY(SX_HG, SY_HG) ' SX_Gyro)
            SpeedAccChartY.Series("Series1").Points.AddXY(SY_HG, SX_HG) ' SX_Gyro)
            SpeedAccChartZ.Series("Series1").Points.AddXY(SZ_HG, SY_HG) 'SX_Gyro)
            L1.Refresh()
            L2.Refresh()
            L3.Refresh()
        End If
    End Sub



    Private Sub DrawPolar(ByVal cX As Integer, ByVal cY As Integer, ByVal cZ As Integer)

        R1 = Math.Sqrt(cX ^ 2 + cY ^ 2)
        R2 = Math.Sqrt(cX ^ 2 + cZ ^ 2)
        R3 = Math.Sqrt(cY ^ 2 + cZ ^ 2)


        If (cX = 0 And cY < 0) Then O1 = 270
        If (cX = 0 And cY > 0) Then O1 = 90
        If (cX <> 0) Then O1 = 180 * (Math.Atan(cY / cX)) / Math.PI

        If (cX = 0 And cZ < 0) Then O2 = 270
        If (cX = 0 And cZ > 0) Then O2 = 90
        If (cX <> 0) Then O2 = 180 * (Math.Atan(cZ / cX)) / Math.PI

        If (cY = 0 And cZ < 0) Then O3 = 270
        If (cY = 0 And cZ > 0) Then O3 = 90
        If (cY <> 0) Then O3 = 180 * (Math.Atan(cZ / cY)) / Math.PI

        If (cX = 0 And cY = 0) Then O1 = 0
        If (cX = 0 And cZ = 0) Then O2 = 0
        If (cY = 0 And cZ = 0) Then O2 = 0

    End Sub

    Public Sub ResetCurves()

        SpeedAccChartX.Series("Series1").Points.AddXY(0, 0)
        SpeedAccChartY.Series("Series1").Points.AddXY(0, 0)
        SpeedAccChartZ.Series("Series1").Points.AddXY(0, 0)

        XYChart.Series("XAcc").Points.AddXY(0, 0)
        XZChart.Series("XAcc").Points.AddXY(0, 0)
        YZChart.Series("XAcc").Points.AddXY(0, 0)

        ShocksChart.Series("Series1").Points.AddXY("Low", 1)
        ShockSpectrum.Series("Series1").Points.AddXY(0, 0)

        AccelerationChart.Series("Series1").Points.AddXY(0, 0)

        SpeedChart.Series("Series1").Points.AddXY(0, 0)

        AccChart.Series("XAcc").Points.AddXY(0, 0)
        AccChart.Series("YAcc").Points.AddXY(0, 0)
        AccChart.Series("ZAcc").Points.AddXY(0, 0)

        GyroChart.Series("XAcc").Points.AddXY(0, 0)
        GyroChart.Series("YAcc").Points.AddXY(0, 0)
        GyroChart.Series("ZAcc").Points.AddXY(0, 0)

        HighGChart.Series("XAcc").Points.AddXY(0, 0)
        HighGChart.Series("YAcc").Points.AddXY(0, 0)
        HighGChart.Series("ZAcc").Points.AddXY(0, 0)

        BatteryLevel.Value = 50
    End Sub

    Public Sub Battery_Temperature_LevelUpdate()
        BatteryLevel.Value = BatteryVoltage
        TemperatureValue.Text = Int(Temperature / 340 + 29.53)
        Temperature = Temperature / 340 + 29.53
    End Sub

    Public Sub RawDataBargraphDisplay()
        Dim i As Integer

        For i = 1 To (WindowWidth - 1)
            ACC(1, i) = ACC(1, i + 1)
            ACC(2, i) = ACC(2, i + 1)
            ACC(3, i) = ACC(3, i + 1)
        Next i
        ACC(1, WindowWidth) = SSX_Acc
        ACC(2, WindowWidth) = SSY_Acc
        ACC(3, WindowWidth) = SSZ_Acc

        For i = 1 To (WindowWidth - 1)
            HACC(1, i) = HACC(1, i + 1)
            HACC(2, i) = HACC(2, i + 1)
            HACC(3, i) = HACC(3, i + 1)
        Next i
        HACC(1, WindowWidth) = SSX_HG
        HACC(2, WindowWidth) = SSY_HG
        HACC(3, WindowWidth) = SSZ_HG

        For i = 1 To (WindowWidth - 1)
            GYRO(1, i) = GYRO(1, i + 1)
            GYRO(2, i) = GYRO(2, i + 1)
            GYRO(3, i) = GYRO(3, i + 1)
        Next i
        GYRO(1, WindowWidth) = SX_Gyro
        GYRO(2, WindowWidth) = SY_Gyro
        GYRO(3, WindowWidth) = SZ_Gyro


        AccChart.Series("XAcc").Points.Clear()
        AccChart.Series("YAcc").Points.Clear()
        AccChart.Series("ZAcc").Points.Clear()

        GyroChart.Series("XAcc").Points.Clear()
        GyroChart.Series("YAcc").Points.Clear()
        GyroChart.Series("ZAcc").Points.Clear()

        HighGChart.Series("XAcc").Points.Clear()
        HighGChart.Series("YAcc").Points.Clear()
        HighGChart.Series("ZAcc").Points.Clear()


        For i = 1 To WindowWidth

            AccChart.Series("XAcc").Points.AddXY(i, ACC(1, i))
            AccChart.Series("YAcc").Points.AddXY(i, ACC(2, i))
            AccChart.Series("ZAcc").Points.AddXY(i, ACC(3, i))

            GyroChart.Series("XAcc").Points.AddXY(i, GYRO(1, i))
            GyroChart.Series("YAcc").Points.AddXY(i, GYRO(2, i))
            GyroChart.Series("ZAcc").Points.AddXY(i, GYRO(3, i))

            HighGChart.Series("XAcc").Points.AddXY(i, HACC(1, i))
            HighGChart.Series("YAcc").Points.AddXY(i, HACC(2, i))
            HighGChart.Series("ZAcc").Points.AddXY(i, HACC(3, i))


        Next i

    End Sub

    Private Sub FreqBar_Scroll(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles FreqBar.Scroll
        FreqText.Text = FreqBar.Value
        Frequency = FreqText.Text
    End Sub

    Private Sub OpenPortToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles OpenPortToolStripMenuItem.Click
        Dim PNumberString As String
        PNumberString = PortNumber.Text
        PNumberString = PNumberString.Replace(" ", "")
        mySerialPort.PortName = PNumberString

        If mySerialPort.IsOpen = False Then
            mySerialPort.Open()
        End If

        If mySerialPort.IsOpen = True Then
            MilliSecond = Date.Now.Millisecond
            If MilliSecond < 10 Then MSecond = "00" + Str(MilliSecond) + " ms"
            If MilliSecond < 100 And MilliSecond >= 10 Then MSecond = "0" + Str(MilliSecond) + " ms"
            If MilliSecond >= 100 Then MSecond = Str(MilliSecond) + " ms"
            MSecond = MSecond.Replace(" ", "")
            TimeStamp = Date.Now + "   " + MSecond
            ActivityLog.Items.Add(TimeStamp)
            ActivityLog.Items.Add("Bluetooth Port # " + PortNumber.Text + " is successfully opened.")
            ConnStatus.Text = "Connected"
        End If
    End Sub

    Private Sub ClosePortToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ClosePortToolStripMenuItem.Click
        If mySerialPort.IsOpen = True Then
            mySerialPort.Close()
        End If

        If mySerialPort.IsOpen = False Then
            MilliSecond = Date.Now.Millisecond
            If MilliSecond < 10 Then MSecond = "00" + Str(MilliSecond) + " ms"
            If MilliSecond < 100 And MilliSecond >= 10 Then MSecond = "0" + Str(MilliSecond) + " ms"
            If MilliSecond >= 100 Then MSecond = Str(MilliSecond) + " ms"
            MSecond = MSecond.Replace(" ", "")
            TimeStamp = Date.Now + "   " + MSecond
            ActivityLog.Items.Add(TimeStamp)
            ActivityLog.Items.Add("Bluetooth Port # " + mySerialPort.PortName + " is successfully released.")
            ConnStatus.Text = "Disconnected"
        End If
    End Sub

    Private Sub StopWatchTimer_Tick(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles StopWatchTimer.Tick

        Dim elapsed As TimeSpan = Me.StopWatch.Elapsed

        GameTime.Text = String.Format("{0:00}:{1:00}:{2:00}:{3:000}", _
        Math.Floor(elapsed.TotalHours), _
        elapsed.Minutes, elapsed.Seconds, _
        elapsed.Milliseconds)

        GameTimeA.Text = GameTime.Text

    End Sub


    Private Sub ResetB_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ResetB.Click
        Me.StopWatch.Reset()
        GameTime.Text = "00:00:00:000"
        GameTimeA.Text = "00:00:00:000"

        If FileSession = True Then
            FileSession = False
            outFile.Close()
        End If

    End Sub

    Private Sub StopB_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles StopB.Click
        Me.StopWatch.Stop()
        StopWatchTimer.Stop()

        StartBA.Enabled = True
        StartB.Enabled = True
        StopBA.Enabled = False
        StopB.Enabled = False
    End Sub


    Private Sub StartBA_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles StartBA.Click
        Me.StopWatch.Start()
        StopWatchTimer.Start()

        StartBA.Enabled = False
        StartB.Enabled = False
        StopBA.Enabled = True
        StopB.Enabled = True

        FileSession = True

        csvFile = CSVDirectory & "\CSV_Export" & ".csv"
        csvFile = csvFile.Replace(".csv", "_" & System.DateTime.Now.ToString("yyyyMMdd_hhmmss") & ".csv")

        outFile = My.Computer.FileSystem.OpenTextFileWriter(csvFile, False)

        'CSV Export Header
        outFile.WriteLine("HEXAFIT V2.0")
        outFile.WriteLine("Time, X Acc, Y Acc, Z Acc, X Rot Speed, Y Rot Speed, Z Rot Speed, X Impact, Y Impact, Z Impact, VX, VY, VZ, Temperature")



    End Sub

    Private Sub StopBA_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles StopBA.Click
        Me.StopWatch.Stop()
        StopWatchTimer.Stop()

        StartBA.Enabled = True
        StartB.Enabled = True
        StopBA.Enabled = False
        StopB.Enabled = False

    End Sub

    Private Sub ResetBA_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ResetBA.Click
        Me.StopWatch.Reset()
        GameTime.Text = "00:00:00:000"
        GameTimeA.Text = "00:00:00:000"

        If FileSession = True Then
            FileSession = False
            outFile.Close()
        End If

    End Sub

    Private Sub StartB_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles StartB.Click
        Me.StopWatch.Start()
        StopWatchTimer.Start()

        StartBA.Enabled = False
        StartB.Enabled = False
        StopBA.Enabled = True
        StopB.Enabled = True

        FileSession = True

        csvFile = CSVDirectory & "\CSV_Export" & ".csv"
        csvFile = csvFile.Replace(".csv", "_" & System.DateTime.Now.ToString("yyyyMMdd_hhmmss") & ".csv")

        outFile = My.Computer.FileSystem.OpenTextFileWriter(csvFile, False)

        'CSV Export Header
        outFile.WriteLine("HEXAFIT V2.0")
        outFile.WriteLine("Time, X Acc, Y Acc, Z Acc, X Rot Speed, Y Rot Speed, Z Rot Speed, X Impact, Y Impact, Z Impact, VX, VY, VZ, Temperature")

    End Sub


    Private Sub ToolStripStatusLabel11_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripStatusLabel11.Click
        If mySerialPort.IsOpen = True Then
            mySerialPort.Close()
        End If

        Me.Close()
    End Sub

    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        XYChart.Series("XAcc").Points.Clear()
    End Sub
    Private Sub Button2_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button2.Click
        XZChart.Series("XAcc").Points.Clear()
    End Sub
    Private Sub Button3_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button3.Click
        YZChart.Series("XAcc").Points.Clear()
    End Sub

    Private Sub SampleSlidebar_Scroll(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SampleSlidebar.Scroll
        WindowWidth = SampleSlidebar.Value
        Sample.Text = WindowWidth
    End Sub

    Private Sub ToolStripStatusLabel5_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripStatusLabel5.Click

    End Sub

    Private Sub ExportCSVToolStripMenuItem_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles SelectDirectory.Click

        If (FolderBrowser.ShowDialog() = DialogResult.OK) Then
            CSVDirectory = FolderBrowser.SelectedPath
        End If

    End Sub

  
    Private Sub ToolStripStatusLabel15_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles ToolStripStatusLabel15.Click

        Me.WindowState = FormWindowState.Minimized

    End Sub
End Class
